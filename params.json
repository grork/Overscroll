{"name":"Overscroll","tagline":"WinJS UI Control for pull-to-refresh interactions","body":"Overscroller\r\n=========\r\nThis is a simple WinJS control to allow a twitter-style pull to refresh in a Windows Store WWA (e.g. HTML/CSS/JS) application.\r\n\r\n### Basic Usage ###\r\nThe basic control is in `Codevoid.Controls.Overscroll`, which you can just use in your HTML, after including Overscroll.js & Overscroll.css\r\n\r\nYou can use this in your mark up like so:\r\n\r\n    <div data-win-control=\"Codevoid.Controls.Overscroll\">\r\n    <!-- your content -->\r\n    </div>\r\n    \r\n\r\n### Configuration ####\r\nThere are a number of configuration options you can set on the control through the `data-win-options` attribute.\r\n\r\n#### snapInterval ####\r\nThis sets the interval for the mandatory snap point interval. See MSDN's documentation on [-ms-scroll-snap-points-x](http://msdn.microsoft.com/en-us/library/windows/apps/hh466031.aspx) for more details.\r\n\r\nThis is the string literal you would place in the `snapInterval` property.\r\n\r\nExample:\r\n\r\n    { snapInterval: \"150px\" }\r\n\r\n#### refreshPercent ####\r\nThis controls how far into the overscroll region (as a percentage of the whole overscoll area), ranging from 0 to 1.0 (0% to 100%)\r\n\r\nExample:\r\n\r\n    { refreshPercent: 0.5 } // 50%!\r\n    \r\n#### refreshIndicatorSelector ####\r\nThis is the query selector that is used to find where in the overscrol region the `<progress />` element is for displaying the progress.\r\n\r\nThis element will have it's `value` property set & controlled as part of othe overscroll\r\n\r\n### Being notified & Handling overscroll ###\r\nOverscroll is  signified by the control instance itself raising an `overscrolled` event, which can be listened to with `addEventListener` on the control itself. ** This is not a DOM event **, it is a native JavaScript event provided by the `WinJS.Utilities.eventMixin` mixin.\r\n\r\nWhen this event is raised, one should start their refresh work. When they're work is complete, calling `resetOverscrollState` will return the UI back to the bottom of the overscroll area.\r\n\r\nExample usage:\r\n\r\n    var scroller = document.getElementById(\"scroller\").winControl;\r\n    scroller.addEventListener(\"overscrolled\", function (e) {\r\n        WinJS.Promise.timeout(3000).done(function () {\r\n            e.detail.source.resetOverscrollState();\r\n        });\r\n    });","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}